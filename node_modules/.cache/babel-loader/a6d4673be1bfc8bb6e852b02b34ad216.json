{"ast":null,"code":"import { __extends } from \"tslib\";\nimport './polyfills';\nimport { scrollbarMap, Scrollbar } from './scrollbar';\nimport { addPlugins, ScrollbarPlugin } from './plugin';\nimport { attachStyle, detachStyle } from './style';\nexport { ScrollbarPlugin };\n/**\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\n\nvar SmoothScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(SmoothScrollbar, _super);\n\n  function SmoothScrollbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n\n\n  SmoothScrollbar.init = function (elem, options) {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(\"expect element to be DOM Element, but got \" + elem);\n    } // attach stylesheet\n\n\n    attachStyle();\n\n    if (scrollbarMap.has(elem)) {\n      return scrollbarMap.get(elem);\n    }\n\n    return new Scrollbar(elem, options);\n  };\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n\n\n  SmoothScrollbar.initAll = function (options) {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), function (elem) {\n      return SmoothScrollbar.init(elem, options);\n    });\n  };\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n\n\n  SmoothScrollbar.has = function (elem) {\n    return scrollbarMap.has(elem);\n  };\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n\n\n  SmoothScrollbar.get = function (elem) {\n    return scrollbarMap.get(elem);\n  };\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n\n\n  SmoothScrollbar.getAll = function () {\n    return Array.from(scrollbarMap.values());\n  };\n  /**\n   * Removes scrollbar on the given element\n   */\n\n\n  SmoothScrollbar.destroy = function (elem) {\n    var scrollbar = scrollbarMap.get(elem);\n\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  };\n  /**\n   * Removes all scrollbar instances from current document\n   */\n\n\n  SmoothScrollbar.destroyAll = function () {\n    scrollbarMap.forEach(function (scrollbar) {\n      scrollbar.destroy();\n    });\n  };\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n\n\n  SmoothScrollbar.use = function () {\n    var Plugins = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      Plugins[_i] = arguments[_i];\n    }\n\n    return addPlugins.apply(void 0, Plugins);\n  };\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n\n\n  SmoothScrollbar.attachStyle = function () {\n    return attachStyle();\n  };\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n\n\n  SmoothScrollbar.detachStyle = function () {\n    return detachStyle();\n  };\n\n  SmoothScrollbar.version = \"8.7.4\";\n  SmoothScrollbar.ScrollbarPlugin = ScrollbarPlugin;\n  return SmoothScrollbar;\n}(Scrollbar);\n\nexport default SmoothScrollbar;","map":{"version":3,"mappings":";AAAA,OAAO,aAAP;AAGA,SACEA,YADF,EAEEC,SAFF,QAGO,aAHP;AAKA,SACEC,UADF,EAEEC,eAFF,QAGO,UAHP;AAKA,SACEC,WADF,EAEEC,WAFF,QAGO,SAHP;AAKA,SAASF,eAAT;AAIA;;;;;;;;;AASA;AAAA;AAAA;EAA6CG;;EAA7C;;EA4GC;EAvGC;;;;;;;;EAMOC,uBAAP,UAAYC,IAAZ,EAA+BC,OAA/B,EAAoE;IAClE,IAAI,CAACD,IAAD,IAASA,IAAI,CAACE,QAAL,KAAkB,CAA/B,EAAkC;MAChC,MAAM,IAAIC,SAAJ,CAAc,+CAA6CH,IAA3D,CAAN;IACD,CAHiE,CAKlE;;;IACAJ,WAAW;;IAEX,IAAIJ,YAAY,CAACY,GAAb,CAAiBJ,IAAjB,CAAJ,EAA4B;MAC1B,OAAOR,YAAY,CAACa,GAAb,CAAiBL,IAAjB,CAAP;IACD;;IAED,OAAO,IAAIP,SAAJ,CAAcO,IAAd,EAAoBC,OAApB,CAAP;EACD,CAbM;EAeP;;;;;;;EAKOF,0BAAP,UAAeE,OAAf,EAAoD;IAClD,OAAOK,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,CAAX,EAA0D,UAACT,IAAD,EAAkB;MACjF,OAAOD,eAAe,CAACW,IAAhB,CAAqBV,IAArB,EAA2BC,OAA3B,CAAP;IACD,CAFM,CAAP;EAGD,CAJM;EAMP;;;;;;;EAKOF,sBAAP,UAAWC,IAAX,EAA4B;IAC1B,OAAOR,YAAY,CAACY,GAAb,CAAiBJ,IAAjB,CAAP;EACD,CAFM;EAIP;;;;;;;;EAMOD,sBAAP,UAAWC,IAAX,EAA4B;IAC1B,OAAOR,YAAY,CAACa,GAAb,CAAiBL,IAAjB,CAAP;EACD,CAFM;EAIP;;;;;EAGOD,yBAAP;IACE,OAAOO,KAAK,CAACC,IAAN,CAAWf,YAAY,CAACmB,MAAb,EAAX,CAAP;EACD,CAFM;EAIP;;;;;EAGOZ,0BAAP,UAAeC,IAAf,EAAgC;IAC9B,IAAMY,SAAS,GAAGpB,YAAY,CAACa,GAAb,CAAiBL,IAAjB,CAAlB;;IAEA,IAAIY,SAAJ,EAAe;MACbA,SAAS,CAACC,OAAV;IACD;EACF,CANM;EAQP;;;;;EAGOd,6BAAP;IACEP,YAAY,CAACsB,OAAb,CAAqB,UAACF,SAAD,EAAU;MAC7BA,SAAS,CAACC,OAAV;IACD,CAFD;EAGD,CAJM;EAMP;;;;;;;EAKOd,sBAAP;IAAW;;SAAA,yCAAsC;MAAtCgB;;;IACT,OAAOrB,UAAU,MAAV,CAAU,MAAV,EAAcqB,OAAd,CAAP;EACD,CAFM;EAIP;;;;;;;EAKOhB,8BAAP;IACE,OAAOH,WAAW,EAAlB;EACD,CAFM;EAIP;;;;;;EAIOG,8BAAP;IACE,OAAOF,WAAW,EAAlB;EACD,CAFM;;EAxGAE,0BAAU,OAAV;EAEAA,kCAAkBJ,eAAlB;EAyGT;AAAC,CA5GD,CAA6CF,SAA7C;;eAAqBM","names":["scrollbarMap","Scrollbar","addPlugins","ScrollbarPlugin","attachStyle","detachStyle","__extends","SmoothScrollbar","elem","options","nodeType","TypeError","has","get","Array","from","document","querySelectorAll","init","values","scrollbar","destroy","forEach","Plugins"],"sources":["C:\\Users\\Martin\\Desktop\\portfolio\\node_modules\\smooth-scrollbar\\src\\index.ts"],"sourcesContent":["import './polyfills';\nimport * as I from './interfaces/';\n\nimport {\n  scrollbarMap,\n  Scrollbar,\n} from './scrollbar';\n\nimport {\n  addPlugins,\n  ScrollbarPlugin,\n} from './plugin';\n\nimport {\n  attachStyle,\n  detachStyle,\n} from './style';\n\nexport { ScrollbarPlugin };\n\ndeclare var __SCROLLBAR_VERSION__: string;\n\n/**\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\n\nexport default class SmoothScrollbar extends Scrollbar {\n  static version = __SCROLLBAR_VERSION__;\n\n  static ScrollbarPlugin = ScrollbarPlugin;\n\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n  static init(elem: HTMLElement, options?: Partial<I.ScrollbarOptions>): Scrollbar {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(`expect element to be DOM Element, but got ${elem}`);\n    }\n\n    // attach stylesheet\n    attachStyle();\n\n    if (scrollbarMap.has(elem)) {\n      return scrollbarMap.get(elem) as Scrollbar;\n    }\n\n    return new Scrollbar(elem, options);\n  }\n\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n  static initAll(options?: Partial<I.ScrollbarOptions>): Scrollbar[] {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), (elem: HTMLElement) => {\n      return SmoothScrollbar.init(elem, options);\n    });\n  }\n\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n  static has(elem: HTMLElement): boolean {\n    return scrollbarMap.has(elem);\n  }\n\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n  static get(elem: HTMLElement): Scrollbar | undefined {\n    return scrollbarMap.get(elem) as (Scrollbar | undefined);\n  }\n\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n  static getAll(): Scrollbar[] {\n    return Array.from(scrollbarMap.values()) as Scrollbar[];\n  }\n\n  /**\n   * Removes scrollbar on the given element\n   */\n  static destroy(elem: HTMLElement) {\n    const scrollbar = scrollbarMap.get(elem);\n\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  }\n\n  /**\n   * Removes all scrollbar instances from current document\n   */\n  static destroyAll() {\n    scrollbarMap.forEach((scrollbar) => {\n      scrollbar.destroy();\n    });\n  }\n\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n  static use(...Plugins: (typeof ScrollbarPlugin)[]) {\n    return addPlugins(...Plugins);\n  }\n\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n  static attachStyle() {\n    return attachStyle();\n  }\n\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n  static detachStyle() {\n    return detachStyle();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}