{"ast":null,"code":"import { eventScope, TouchRecord } from '../utils/';\nvar activeScrollbar;\nexport function touchHandler(scrollbar) {\n  var target = scrollbar.options.delegateTo || scrollbar.containerEl;\n  var touchRecord = new TouchRecord();\n  var addEvent = eventScope(scrollbar);\n  var damping;\n  var pointerCount = 0;\n  addEvent(target, 'touchstart', function (evt) {\n    // start records\n    touchRecord.track(evt); // stop scrolling\n\n    scrollbar.setMomentum(0, 0); // save damping\n\n    if (pointerCount === 0) {\n      damping = scrollbar.options.damping;\n      scrollbar.options.damping = Math.max(damping, 0.5); // less frames on touchmove\n    }\n\n    pointerCount++;\n  });\n  addEvent(target, 'touchmove', function (evt) {\n    if (activeScrollbar && activeScrollbar !== scrollbar) return;\n    touchRecord.update(evt);\n\n    var _a = touchRecord.getDelta(),\n        x = _a.x,\n        y = _a.y;\n\n    scrollbar.addTransformableMomentum(x, y, evt, function (willScroll) {\n      if (willScroll && evt.cancelable) {\n        evt.preventDefault();\n        activeScrollbar = scrollbar;\n      }\n    });\n  });\n  addEvent(target, 'touchcancel touchend', function (evt) {\n    var delta = touchRecord.getEasingDistance(damping);\n    scrollbar.addTransformableMomentum(delta.x, delta.y, evt);\n    pointerCount--; // restore damping\n\n    if (pointerCount === 0) {\n      scrollbar.options.damping = damping;\n    }\n\n    touchRecord.release(evt);\n    activeScrollbar = null;\n  });\n}","map":{"version":3,"mappings":"AAEA,SACEA,UADF,EAEEC,WAFF,QAGO,WAHP;AAKA,IAAIC,eAAJ;AAEA,OAAM,SAAUC,YAAV,CAAuBC,SAAvB,EAA6C;EACjD,IAAMC,MAAM,GAAGD,SAAS,CAACE,OAAV,CAAkBC,UAAlB,IAAgCH,SAAS,CAACI,WAAzD;EACA,IAAMC,WAAW,GAAG,IAAIR,WAAJ,EAApB;EACA,IAAMS,QAAQ,GAAGV,UAAU,CAACI,SAAD,CAA3B;EAEA,IAAIO,OAAJ;EACA,IAAIC,YAAY,GAAG,CAAnB;EAEAF,QAAQ,CAACL,MAAD,EAAS,YAAT,EAAuB,UAACQ,GAAD,EAAgB;IAC7C;IACAJ,WAAW,CAACK,KAAZ,CAAkBD,GAAlB,EAF6C,CAI7C;;IACAT,SAAS,CAACW,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAL6C,CAO7C;;IACA,IAAIH,YAAY,KAAK,CAArB,EAAwB;MACtBD,OAAO,GAAGP,SAAS,CAACE,OAAV,CAAkBK,OAA5B;MACAP,SAAS,CAACE,OAAV,CAAkBK,OAAlB,GAA4BK,IAAI,CAACC,GAAL,CAASN,OAAT,EAAkB,GAAlB,CAA5B,CAFsB,CAE8B;IACrD;;IAEDC,YAAY;EACb,CAdO,CAAR;EAgBAF,QAAQ,CAACL,MAAD,EAAS,WAAT,EAAsB,UAACQ,GAAD,EAAgB;IAC5C,IAAIX,eAAe,IAAIA,eAAe,KAAKE,SAA3C,EAAsD;IAEtDK,WAAW,CAACS,MAAZ,CAAmBL,GAAnB;;IAEM;IAAA,IAAEM,QAAF;IAAA,IAAKC,QAAL;;IAENhB,SAAS,CAACiB,wBAAV,CAAmCF,CAAnC,EAAsCC,CAAtC,EAAyCP,GAAzC,EAA8C,UAACS,UAAD,EAAW;MACvD,IAAIA,UAAU,IAAIT,GAAG,CAACU,UAAtB,EAAkC;QAChCV,GAAG,CAACW,cAAJ;QACAtB,eAAe,GAAGE,SAAlB;MACD;IACF,CALD;EAMD,CAbO,CAAR;EAeAM,QAAQ,CAACL,MAAD,EAAS,sBAAT,EAAiC,UAACQ,GAAD,EAAgB;IACvD,IAAMY,KAAK,GAAGhB,WAAW,CAACiB,iBAAZ,CAA8Bf,OAA9B,CAAd;IAEAP,SAAS,CAACiB,wBAAV,CACEI,KAAK,CAACN,CADR,EAEEM,KAAK,CAACL,CAFR,EAGEP,GAHF;IAMAD,YAAY,GAT2C,CAWvD;;IACA,IAAIA,YAAY,KAAK,CAArB,EAAwB;MACtBR,SAAS,CAACE,OAAV,CAAkBK,OAAlB,GAA4BA,OAA5B;IACD;;IAEDF,WAAW,CAACkB,OAAZ,CAAoBd,GAApB;IACAX,eAAe,GAAG,IAAlB;EACD,CAlBO,CAAR;AAmBD","names":["eventScope","TouchRecord","activeScrollbar","touchHandler","scrollbar","target","options","delegateTo","containerEl","touchRecord","addEvent","damping","pointerCount","evt","track","setMomentum","Math","max","update","x","y","addTransformableMomentum","willScroll","cancelable","preventDefault","delta","getEasingDistance","release"],"sources":["C:\\Users\\Martin\\Desktop\\portfolio\\node_modules\\smooth-scrollbar\\src\\events\\touch.ts"],"sourcesContent":["import * as I from '../interfaces/';\n\nimport {\n  eventScope,\n  TouchRecord,\n} from '../utils/';\n\nlet activeScrollbar: I.Scrollbar | null;\n\nexport function touchHandler(scrollbar: I.Scrollbar) {\n  const target = scrollbar.options.delegateTo || scrollbar.containerEl;\n  const touchRecord = new TouchRecord();\n  const addEvent = eventScope(scrollbar);\n\n  let damping: number;\n  let pointerCount = 0;\n\n  addEvent(target, 'touchstart', (evt: TouchEvent) => {\n    // start records\n    touchRecord.track(evt);\n\n    // stop scrolling\n    scrollbar.setMomentum(0, 0);\n\n    // save damping\n    if (pointerCount === 0) {\n      damping = scrollbar.options.damping;\n      scrollbar.options.damping = Math.max(damping, 0.5); // less frames on touchmove\n    }\n\n    pointerCount++;\n  });\n\n  addEvent(target, 'touchmove', (evt: TouchEvent) => {\n    if (activeScrollbar && activeScrollbar !== scrollbar) return;\n\n    touchRecord.update(evt);\n\n    const { x, y } = touchRecord.getDelta();\n\n    scrollbar.addTransformableMomentum(x, y, evt, (willScroll) => {\n      if (willScroll && evt.cancelable) {\n        evt.preventDefault();\n        activeScrollbar = scrollbar;\n      }\n    });\n  });\n\n  addEvent(target, 'touchcancel touchend', (evt: TouchEvent) => {\n    const delta = touchRecord.getEasingDistance(damping);\n\n    scrollbar.addTransformableMomentum(\n      delta.x,\n      delta.y,\n      evt,\n    );\n\n    pointerCount--;\n\n    // restore damping\n    if (pointerCount === 0) {\n      scrollbar.options.damping = damping;\n    }\n\n    touchRecord.release(evt);\n    activeScrollbar = null;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}