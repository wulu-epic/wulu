{"ast":null,"code":"import clamp from 'lodash-es/clamp';\nimport { isOneOf, getPosition, eventScope, setStyle } from '../utils/';\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"X\"] = 0] = \"X\";\n  Direction[Direction[\"Y\"] = 1] = \"Y\";\n})(Direction || (Direction = {}));\n\nexport function mouseHandler(scrollbar) {\n  var addEvent = eventScope(scrollbar);\n  var container = scrollbar.containerEl;\n  var _a = scrollbar.track,\n      xAxis = _a.xAxis,\n      yAxis = _a.yAxis;\n\n  function calcMomentum(direction, clickPosition) {\n    var size = scrollbar.size,\n        limit = scrollbar.limit,\n        offset = scrollbar.offset;\n\n    if (direction === Direction.X) {\n      var totalWidth = size.container.width + (xAxis.thumb.realSize - xAxis.thumb.displaySize);\n      return clamp(clickPosition / totalWidth * size.content.width, 0, limit.x) - offset.x;\n    }\n\n    if (direction === Direction.Y) {\n      var totalHeight = size.container.height + (yAxis.thumb.realSize - yAxis.thumb.displaySize);\n      return clamp(clickPosition / totalHeight * size.content.height, 0, limit.y) - offset.y;\n    }\n\n    return 0;\n  }\n\n  function getTrackDirection(elem) {\n    if (isOneOf(elem, [xAxis.element, xAxis.thumb.element])) {\n      return Direction.X;\n    }\n\n    if (isOneOf(elem, [yAxis.element, yAxis.thumb.element])) {\n      return Direction.Y;\n    }\n\n    return void 0;\n  }\n\n  var isMouseDown;\n  var isMouseMoving;\n  var startOffsetToThumb;\n  var trackDirection;\n  var containerRect;\n  addEvent(container, 'click', function (evt) {\n    if (isMouseMoving || !isOneOf(evt.target, [xAxis.element, yAxis.element])) {\n      return;\n    }\n\n    var track = evt.target;\n    var direction = getTrackDirection(track);\n    var rect = track.getBoundingClientRect();\n    var clickPos = getPosition(evt);\n\n    if (direction === Direction.X) {\n      var offsetOnTrack = clickPos.x - rect.left - xAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(calcMomentum(direction, offsetOnTrack), 0);\n    }\n\n    if (direction === Direction.Y) {\n      var offsetOnTrack = clickPos.y - rect.top - yAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(0, calcMomentum(direction, offsetOnTrack));\n    }\n  });\n  addEvent(container, 'mousedown', function (evt) {\n    if (!isOneOf(evt.target, [xAxis.thumb.element, yAxis.thumb.element])) {\n      return;\n    }\n\n    isMouseDown = true;\n    var thumb = evt.target;\n    var cursorPos = getPosition(evt);\n    var thumbRect = thumb.getBoundingClientRect();\n    trackDirection = getTrackDirection(thumb); // pointer offset to thumb\n\n    startOffsetToThumb = {\n      x: cursorPos.x - thumbRect.left,\n      y: cursorPos.y - thumbRect.top\n    }; // container bounding rectangle\n\n    containerRect = container.getBoundingClientRect(); // prevent selection, see:\n    // https://github.com/idiotWu/smooth-scrollbar/issues/48\n\n    setStyle(scrollbar.containerEl, {\n      '-user-select': 'none'\n    });\n  });\n  addEvent(window, 'mousemove', function (evt) {\n    if (!isMouseDown) return;\n    isMouseMoving = true;\n    var cursorPos = getPosition(evt);\n\n    if (trackDirection === Direction.X) {\n      // get percentage of pointer position in track\n      // then tranform to px\n      // don't need easing\n      var offsetOnTrack = cursorPos.x - startOffsetToThumb.x - containerRect.left;\n      scrollbar.setMomentum(calcMomentum(trackDirection, offsetOnTrack), 0);\n    }\n\n    if (trackDirection === Direction.Y) {\n      var offsetOnTrack = cursorPos.y - startOffsetToThumb.y - containerRect.top;\n      scrollbar.setMomentum(0, calcMomentum(trackDirection, offsetOnTrack));\n    }\n  });\n  addEvent(window, 'mouseup blur', function () {\n    isMouseDown = isMouseMoving = false;\n    setStyle(scrollbar.containerEl, {\n      '-user-select': ''\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["clamp","isOneOf","getPosition","eventScope","setStyle","Direction","mouseHandler","scrollbar","addEvent","container","containerEl","xAxis","yAxis","calcMomentum","direction","clickPosition","limit","offset","X","totalWidth","size","width","thumb","realSize","displaySize","content","x","Y","totalHeight","height","y","getTrackDirection","elem","element","isMouseDown","isMouseMoving","startOffsetToThumb","trackDirection","containerRect","evt","target","track","rect","getBoundingClientRect","clickPos","offsetOnTrack","left","setMomentum","top","cursorPos","thumbRect","window"],"sources":["C:\\Users\\Martin\\Desktop\\portfolio\\node_modules\\smooth-scrollbar\\src\\events\\mouse.ts"],"sourcesContent":["import clamp from 'lodash-es/clamp';\nimport * as I from '../interfaces/';\n\nimport {\n  isOneOf,\n  getPosition,\n  eventScope,\n  setStyle,\n} from '../utils/';\n\nenum Direction { X, Y }\n\nexport function mouseHandler(scrollbar: I.Scrollbar) {\n  const addEvent = eventScope(scrollbar);\n  const container = scrollbar.containerEl;\n  const { xAxis, yAxis } = scrollbar.track;\n\n  function calcMomentum(\n    direction: Direction,\n    clickPosition: number,\n  ): number {\n    const {\n      size,\n      limit,\n      offset,\n    } = scrollbar;\n\n    if (direction === Direction.X) {\n      const totalWidth = size.container.width + (xAxis.thumb.realSize - xAxis.thumb.displaySize);\n\n      return clamp(clickPosition / totalWidth * size.content.width, 0, limit.x) - offset.x;\n    }\n\n    if (direction === Direction.Y) {\n      const totalHeight = size.container.height + (yAxis.thumb.realSize - yAxis.thumb.displaySize);\n\n      return clamp(clickPosition / totalHeight * size.content.height, 0, limit.y) - offset.y;\n    }\n\n    return 0;\n  }\n\n  function getTrackDirection(\n    elem: HTMLElement,\n  ): Direction | undefined {\n    if (isOneOf(elem, [xAxis.element, xAxis.thumb.element])) {\n      return Direction.X;\n    }\n\n    if (isOneOf(elem, [yAxis.element, yAxis.thumb.element])) {\n      return Direction.Y;\n    }\n\n    return void 0;\n  }\n\n  let isMouseDown: boolean;\n  let isMouseMoving: boolean;\n  let startOffsetToThumb: { x: number, y: number };\n  let trackDirection: Direction | undefined;\n  let containerRect: ClientRect;\n\n  addEvent(container, 'click', (evt: MouseEvent) => {\n    if (isMouseMoving || !isOneOf(evt.target, [xAxis.element, yAxis.element])) {\n      return;\n    }\n\n    const track = evt.target as HTMLElement;\n    const direction = getTrackDirection(track);\n    const rect = track.getBoundingClientRect();\n    const clickPos = getPosition(evt);\n\n    if (direction === Direction.X) {\n      const offsetOnTrack = clickPos.x - rect.left - xAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(calcMomentum(direction, offsetOnTrack), 0);\n    }\n\n    if (direction === Direction.Y) {\n      const offsetOnTrack = clickPos.y - rect.top - yAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(0, calcMomentum(direction, offsetOnTrack));\n    }\n  });\n\n  addEvent(container, 'mousedown', (evt: MouseEvent) => {\n    if (!isOneOf(evt.target, [xAxis.thumb.element, yAxis.thumb.element])) {\n      return;\n    }\n\n    isMouseDown = true;\n\n    const thumb = evt.target as HTMLElement;\n    const cursorPos = getPosition(evt);\n    const thumbRect = thumb.getBoundingClientRect();\n\n    trackDirection = getTrackDirection(thumb);\n\n    // pointer offset to thumb\n    startOffsetToThumb = {\n      x: cursorPos.x - thumbRect.left,\n      y: cursorPos.y - thumbRect.top,\n    };\n\n    // container bounding rectangle\n    containerRect = container.getBoundingClientRect();\n\n    // prevent selection, see:\n    // https://github.com/idiotWu/smooth-scrollbar/issues/48\n    setStyle(scrollbar.containerEl, {\n      '-user-select': 'none',\n    });\n  });\n\n  addEvent(window, 'mousemove', (evt) => {\n    if (!isMouseDown) return;\n\n    isMouseMoving = true;\n\n    const cursorPos = getPosition(evt);\n\n    if (trackDirection === Direction.X) {\n      // get percentage of pointer position in track\n      // then tranform to px\n      // don't need easing\n      const offsetOnTrack = cursorPos.x - startOffsetToThumb.x - containerRect.left;\n      scrollbar.setMomentum(calcMomentum(trackDirection, offsetOnTrack), 0);\n    }\n\n    if (trackDirection === Direction.Y) {\n      const offsetOnTrack = cursorPos.y - startOffsetToThumb.y - containerRect.top;\n      scrollbar.setMomentum(0, calcMomentum(trackDirection, offsetOnTrack));\n    }\n  });\n\n  addEvent(window, 'mouseup blur', () => {\n    isMouseDown = isMouseMoving = false;\n\n    setStyle(scrollbar.containerEl, {\n      '-user-select': '',\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}