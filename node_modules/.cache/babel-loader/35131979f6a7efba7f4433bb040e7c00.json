{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getPosition } from './get-position';\n\nvar Tracker =\n/** @class */\nfunction () {\n  function Tracker(touch) {\n    this.velocityMultiplier = /Android/.test(navigator.userAgent) ? window.devicePixelRatio : 1;\n    this.updateTime = Date.now();\n    this.delta = {\n      x: 0,\n      y: 0\n    };\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.lastPosition = {\n      x: 0,\n      y: 0\n    };\n    this.lastPosition = getPosition(touch);\n  }\n\n  Tracker.prototype.update = function (touch) {\n    var _a = this,\n        velocity = _a.velocity,\n        updateTime = _a.updateTime,\n        lastPosition = _a.lastPosition;\n\n    var now = Date.now();\n    var position = getPosition(touch);\n    var delta = {\n      x: -(position.x - lastPosition.x),\n      y: -(position.y - lastPosition.y)\n    };\n    var duration = now - updateTime || 16.7;\n    var vx = delta.x / duration * 16.7;\n    var vy = delta.y / duration * 16.7;\n    velocity.x = vx * this.velocityMultiplier;\n    velocity.y = vy * this.velocityMultiplier;\n    this.delta = delta;\n    this.updateTime = now;\n    this.lastPosition = position;\n  };\n\n  return Tracker;\n}();\n\nexport { Tracker };\n\nvar TouchRecord =\n/** @class */\nfunction () {\n  function TouchRecord() {\n    this._touchList = {};\n  }\n\n  Object.defineProperty(TouchRecord.prototype, \"_primitiveValue\", {\n    get: function () {\n      return {\n        x: 0,\n        y: 0\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TouchRecord.prototype.isActive = function () {\n    return this._activeTouchID !== undefined;\n  };\n\n  TouchRecord.prototype.getDelta = function () {\n    var tracker = this._getActiveTracker();\n\n    if (!tracker) {\n      return this._primitiveValue;\n    }\n\n    return __assign({}, tracker.delta);\n  };\n\n  TouchRecord.prototype.getVelocity = function () {\n    var tracker = this._getActiveTracker();\n\n    if (!tracker) {\n      return this._primitiveValue;\n    }\n\n    return __assign({}, tracker.velocity);\n  };\n\n  TouchRecord.prototype.getEasingDistance = function (damping) {\n    var deAcceleration = 1 - damping;\n    var distance = {\n      x: 0,\n      y: 0\n    };\n    var vel = this.getVelocity();\n    Object.keys(vel).forEach(function (dir) {\n      // ignore small velocity\n      var v = Math.abs(vel[dir]) <= 10 ? 0 : vel[dir];\n\n      while (v !== 0) {\n        distance[dir] += v;\n        v = v * deAcceleration | 0;\n      }\n    });\n    return distance;\n  };\n\n  TouchRecord.prototype.track = function (evt) {\n    var _this = this;\n\n    var targetTouches = evt.targetTouches;\n    Array.from(targetTouches).forEach(function (touch) {\n      _this._add(touch);\n    });\n    return this._touchList;\n  };\n\n  TouchRecord.prototype.update = function (evt) {\n    var _this = this;\n\n    var touches = evt.touches,\n        changedTouches = evt.changedTouches;\n    Array.from(touches).forEach(function (touch) {\n      _this._renew(touch);\n    });\n\n    this._setActiveID(changedTouches);\n\n    return this._touchList;\n  };\n\n  TouchRecord.prototype.release = function (evt) {\n    var _this = this;\n\n    delete this._activeTouchID;\n    Array.from(evt.changedTouches).forEach(function (touch) {\n      _this._delete(touch);\n    });\n  };\n\n  TouchRecord.prototype._add = function (touch) {\n    if (this._has(touch)) {\n      // reset tracker\n      this._delete(touch);\n    }\n\n    var tracker = new Tracker(touch);\n    this._touchList[touch.identifier] = tracker;\n  };\n\n  TouchRecord.prototype._renew = function (touch) {\n    if (!this._has(touch)) {\n      return;\n    }\n\n    var tracker = this._touchList[touch.identifier];\n    tracker.update(touch);\n  };\n\n  TouchRecord.prototype._delete = function (touch) {\n    delete this._touchList[touch.identifier];\n  };\n\n  TouchRecord.prototype._has = function (touch) {\n    return this._touchList.hasOwnProperty(touch.identifier);\n  };\n\n  TouchRecord.prototype._setActiveID = function (touches) {\n    this._activeTouchID = touches[touches.length - 1].identifier;\n  };\n\n  TouchRecord.prototype._getActiveTracker = function () {\n    var _a = this,\n        _touchList = _a._touchList,\n        _activeTouchID = _a._activeTouchID;\n\n    return _touchList[_activeTouchID];\n  };\n\n  return TouchRecord;\n}();\n\nexport { TouchRecord };","map":{"version":3,"mappings":"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","names":["getPosition","touch","test","navigator","userAgent","window","devicePixelRatio","Date","now","x","y","lastPosition","Tracker","velocity","updateTime","position","delta","duration","vx","vy","velocityMultiplier","Object","TouchRecord","_activeTouchID","undefined","tracker","_getActiveTracker","_primitiveValue","damping","deAcceleration","distance","vel","getVelocity","keys","forEach","v","Math","abs","dir","evt","Array","from","targetTouches","_this","_add","_touchList","changedTouches","touches","_renew","_setActiveID","_delete","_has","identifier","update","hasOwnProperty","length"],"sources":["C:\\Users\\Martin\\Desktop\\portfolio\\node_modules\\smooth-scrollbar\\src\\utils\\touch-record.ts"],"sourcesContent":["import { getPosition } from './get-position';\n\nexport class Tracker {\n  readonly velocityMultiplier = /Android/.test(navigator.userAgent) ? window.devicePixelRatio : 1;\n\n  updateTime = Date.now();\n  delta = { x: 0, y: 0 };\n  velocity = { x: 0, y: 0 };\n  lastPosition = { x: 0, y: 0 };\n\n  constructor(touch: Touch) {\n    this.lastPosition = getPosition(touch);\n  }\n\n  update(touch: Touch) {\n    const {\n      velocity,\n      updateTime,\n      lastPosition,\n    } = this;\n\n    const now = Date.now();\n    const position = getPosition(touch);\n\n    const delta = {\n      x: -(position.x - lastPosition.x),\n      y: -(position.y - lastPosition.y),\n    };\n\n    const duration = (now - updateTime) || 16.7;\n    const vx = delta.x / duration * 16.7;\n    const vy = delta.y / duration * 16.7;\n    velocity.x = vx * this.velocityMultiplier;\n    velocity.y = vy * this.velocityMultiplier;\n\n    this.delta = delta;\n    this.updateTime = now;\n    this.lastPosition = position;\n  }\n}\n\nexport class TouchRecord {\n  private _activeTouchID: number;\n  private _touchList: { [id: number]: Tracker } = {};\n\n  private get _primitiveValue() {\n    return { x: 0, y: 0 };\n  }\n\n  isActive() {\n    return this._activeTouchID !== undefined;\n  }\n\n  getDelta() {\n    const tracker = this._getActiveTracker();\n\n    if (!tracker) {\n      return this._primitiveValue;\n    }\n\n    return { ...tracker.delta };\n  }\n\n  getVelocity() {\n    const tracker = this._getActiveTracker();\n\n    if (!tracker) {\n      return this._primitiveValue;\n    }\n\n    return { ...tracker.velocity };\n  }\n\n  getEasingDistance(damping: number) {\n    const deAcceleration = 1 - damping;\n\n    let distance = {\n      x: 0,\n      y: 0,\n    };\n\n    const vel = this.getVelocity();\n\n    Object.keys(vel).forEach(dir => {\n      // ignore small velocity\n      let v = Math.abs(vel[dir]) <= 10 ? 0 : vel[dir];\n\n      while (v !== 0) {\n        distance[dir] += v;\n        v = (v * deAcceleration) | 0;\n      }\n    });\n\n    return distance;\n  }\n\n  track(evt: TouchEvent) {\n    const {\n      targetTouches,\n    } = evt;\n\n    Array.from(targetTouches).forEach(touch => {\n      this._add(touch);\n    });\n\n    return this._touchList;\n  }\n\n  update(evt: TouchEvent) {\n    const {\n      touches,\n      changedTouches,\n    } = evt;\n\n    Array.from(touches).forEach(touch => {\n      this._renew(touch);\n    });\n\n    this._setActiveID(changedTouches);\n\n    return this._touchList;\n  }\n\n  release(evt: TouchEvent) {\n    delete this._activeTouchID;\n\n    Array.from(evt.changedTouches).forEach(touch => {\n      this._delete(touch);\n    });\n  }\n\n  private _add(touch: Touch) {\n    if (this._has(touch)) {\n      // reset tracker\n      this._delete(touch);\n    }\n\n    const tracker = new Tracker(touch);\n\n    this._touchList[touch.identifier] = tracker;\n  }\n\n  private _renew(touch: Touch) {\n    if (!this._has(touch)) {\n      return;\n    }\n\n    const tracker = this._touchList[touch.identifier];\n\n    tracker.update(touch);\n  }\n\n  private _delete(touch: Touch) {\n    delete this._touchList[touch.identifier];\n  }\n\n  private _has(touch: Touch): boolean {\n    return this._touchList.hasOwnProperty(touch.identifier);\n  }\n\n  private _setActiveID(touches: TouchList) {\n    this._activeTouchID = touches[touches.length - 1].identifier;\n  }\n\n  private _getActiveTracker(): Tracker {\n    const {\n      _touchList,\n      _activeTouchID,\n    } = this;\n\n    return _touchList[_activeTouchID];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}